{
    "filepath": "./posts/dailydigest-2-may-16/post.json",
    "title": "Some ES6 and A Story from the Mahabharata",
    "abstract": "A DailyDigest Post about a new JavaScript (ES6) feature I learned, some thoughts on a novel I recently started reading. The novel takes us back to the days of the Mahabharata and tells us an interesting yet rather obscure story.",
    "created": "2nd May, 2016",
    "modified": "2nd May, 2016",
    "published": true,
    "categories": [
        "DailyDigest"
    ],
    "content": "<p>Today I will write about a few random things that are barely related to each other in any way. Of course we can always say that every thing, every thought existing within our universe is connected and related to everything, though we can neither prove or disprove such connections/relations easily. But anyway, the following sections, in accordance with commonsense and common-perception,  are from rather mutually exclusive domains. </p>\n\n<h3>Generators in ES6</h3>\n\n<p>Prior to ES2015, there was no concept of generator expressions in JavaScript. Now, those who are from a Python background can imagine what this post is about, because generators and comprehensions are widely used in Python, they make writing iterative generation of values and arrays (lists in context of Python) easy, short and convenient. </p>\n\n<pre><code>def mySquareGenerator(lowerBound, upperBound):\n  &quot;&quot;&quot;\n    This is an example of generator function in Python using yield, now this function\n    can be used like the range function in a loop. The shorthand notations described \n    below can be used in same manner too. For example\n\n      for i in mySquareGenerator(1,5):\n        print(i)\n\n      This will print\n      1\n      4\n      9\n      16       \n  &quot;&quot;&quot;\n  for i in range(lowerBound, upperBound):\n    yield i**2\n\n# shorthand syntax for static generators\n# this is useful when you are to iterate over a fixed range\nmyStaticSquareGenerator = (x**2 for x in range(1,5))\n\n# This shorthand can be made dynamic by using this with lambda\n# for example :\nmyDynamicSquareGenerator = lambda low,up : (x**2 for x in range(low, up))</code></pre>\n\n<p>As of ES5, this kind of cool stuff was not natively possible in JavaScript, though there were/are modules like es5-generators for using generators. But ES6 brings generators to the core of the language syntax (actually this is a syntactic sugar, it all gets transpiled to ES5 anyway). \nThe new additions to ES6 in this context are the generator functions which are identified by the syntax <code>function* ()</code> and the <code>yield</code> keyword. Using these two new features we can write generator functions in JavaScript just like in Python. For example :</p>\n\n<pre><code>var myCoolGenerator = function* (low, up) {\n  for (var i=low; i&lt;up; i++) yield i*i;\n} \n\nfor(var i of myCoolGenerator(1,5)) console.log(i);\n// this will give the same output as the python example above</code></pre>\n\n<p> Now you might have noticed that the for loop using the generator uses <code>of</code> instead of <code>in</code> to iterate over the generator. The keyword <code>of</code> is another new addition in ES6. It&#39;s the standard way to iterate over an <code>iterable</code>. An <code>iterable</code> is anything that defines the [Symbol.iterator] property. Now an <code>iterator</code> in ES6 is any object that defines a <code>next</code> method to return a tuple {done, value}. A generator function creates a generator which is iterable. That&#39;s why we use <code>of</code> instead of <code>in</code> to iterate over a generator.</p>\n\n<p> There are shorthand versions of generators and comprehensions in ES6, probably as experimental features and not a part of the specifications, I am not sure yet, I have not gone through the ES6 specifications which is some 650+ pages long and I am new to ES6 as of now (In fact I started ES6 just today, I have been writing ES5 till now, the urge to learn ES6 came as a consequent of the urge to learn TypeScript which in turn came as a consequent of the need to learn AngularJS 2). But maybe because of their experimental status, these shorthand features have been removed from <code>babel 6</code>. In <code>node v5.8.0</code> with the <code>--harmony</code> flag, the shorthands do not seem to work either. Maybe I am just doing it wrong and that&#39;s why the shorthands are not working, there are a lot of tutorials on generator expressions in ES6 on the web and some of those tutorials have given examples of those shorthands. </p>\n\n<p> But the generator function syntax works fine on both <code>node</code> and <code>babel 6</code>. I will go through the specs as soon as I can and get my doubts on this matter clarified. When I do that I&#39;ll remember to mention that here in a DailyDigest post.</p>\n\n<hr/>\n\n<h3>A story about a certain Pregnant King</h3>\n\n<p><img alt=\"The Pregnant King cover\" src=\"./blog/posts/dailydigest-2-may-16/assets/cover.jpg\"/></p>\n\n<p>Currently I am reading a novel named <em>&quot;The Pregnant King&quot;</em> by Devdutt Pattnaik. This is a re-read of the novel, I had gone through it about 8 months ago. Back then I was rather busy about some project and had gone through the novel in a hurry. Now I am taking this re-read to go through the story in details.</p>\n\n<p>The novel tells us the story of a certain king from the Mahabharata era named &#39;Yuvanashva&#39;, who got pregnant after accidentally drinking a magic potion concocted for his wives. But was it an accident or was it some <em>Karmic</em> phenomenon occuring all along ? Whether it was an accident or not, how does the society accept this and what are the consequences of this unusual pregnancy ? How does the social and political rules affect the lives of the king and everybody else involved in this story ? How and when do <em>duty</em> and <em>ambition</em> contradict each other and to what extent ? The novel does answer these questions in an elaborate manner.</p>\n\n<p>The novel subtly focuses on deep philosophical questions regarding the paradoxical nature of gender, and as such life. And towards the end it tries to answer those questions from an Indian <em>vedic</em> point of view. The course of the story is fluid and pleasant with nice imagery and real cultural references. During the course of the story many other philosophical issues like <em>various interpretations of Dharma</em>, <em>symbolism of idol worship</em>, <em>paradoxes and ambiguities of social rules</em>, <em>rigidity of the social structure vs personal freedom</em> etc are discussed nicely. The novel is definitely a good read. The last few chapters are really enlightening, I am looking forward to reach the last few chapters again soon.</p>\n\n<p>The author mentions in the preface that the story has been recounted twice in the Mahabharata and several times in other <em>Purana</em>s. The novel shifts the timeline of the story a bit from that of the original Mahabharata version to achieve some dramatism, but the essence of the story remains the same so do the philosophical issues and their possible resolutions. </p>\n\n<p>In the context of current discussions on <em>religious intolerance in India</em>, I think this book is an enlightening read. It explores the Indian <em>Dharmic</em> philosophies from a rather impartial point of view, it questions certain social customs and tries to find resolutions according to the Dharmic philosophies. In the end, it affirms that the problems will be solved by the creators of the problems, as stated multiple times in the story <em>&quot;From Prajapati has come the problem. From Prajapati will come the solution&quot;</em>.</p>"
}