{
    "filepath": "./posts/opensourcing-classd-TbZb2U/post.json",
    "id": "opensourcing-classd-TbZb2U",
    "title": "Opensourcing classd",
    "href": "https://gnsp.in/blog/posts/opensourcing-classd-TbZb2U/index.html",
    "cover_image": false,
    "created": "September 30, 2019",
    "modified": "September 30, 2019",
    "published": true,
    "categories": [
        "react",
        "javascript",
        "web",
        "opensource",
        "technology",
        "css"
    ],
    "content": "<hr>\n<p>If you are a frontend developer, there is a fair chance that you have used\n<a href=\"https://github.com/JedWatson/classnames\">Jedwatson&#39;s classNames</a> package in your projects. In fact, classNames is the official replacement for classSet, which was originally shipped in the React.js Addons bundle. It&#39;s one of the most used packages in the world of React.</p>\n<h3 id=\"a-simple-usecase-for-classnames\">A simple usecase for <code>classNames</code></h3>\n<p>For instance, if we needed to conditionally apply css classes to an element inside a React component based on the component state, we may do it like the following:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EnhancedButton</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-comment\">// ...</span>\n\n    render () {\n        const btnClass = classNames({\n            <span class=\"hljs-symbol\">'bt</span>n': <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-symbol\">'btn</span>-large': <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-symbol\">'btn</span>-primary': <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-symbol\">'btn</span>-pressed': <span class=\"hljs-keyword\">this</span>.state.isPressed,\n            <span class=\"hljs-symbol\">'btn</span>-over': !<span class=\"hljs-keyword\">this</span>.state.isPressed &amp;&amp; <span class=\"hljs-keyword\">this</span>.state.isHovered\n        });\n\n        <span class=\"hljs-keyword\">return</span> &lt;button className={btnClass}&gt;{<span class=\"hljs-keyword\">this</span>.props.label}&lt;/button&gt;;\n    }\n}</code></pre>\n<p>The approach above is neat, but given that many of the classes are applied unconditionally, the pattern of setting them to  true in the configuration object becomes rather redundant. To counter that redundancy, we may write something like the following:</p>\n<pre><code class=\"language-js\">const btnClass = classNames(\n    'btn', \n    'btn-large',\n    'btn-primary',\n    {\n        'btn-pressed': this.<span class=\"hljs-keyword\">state</span>.isPressed,\n        'btn-over': !this.<span class=\"hljs-keyword\">state</span>.isPressed &amp;&amp; this.<span class=\"hljs-keyword\">state</span>.isHovered  \n    }\n);</code></pre>\n<h3 id=\"age-of-es6-template-literals\">Age of ES6 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literals</a></h3>\n<p>However, as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">ES6 or ES2015 template literals</a> became <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Browser_compatibility\">supported across mainstream browsers</a>, it became simpler to write the above snippet as:</p>\n<pre><code class=\"language-js\">const btnClass = `\n    btn \n    btn-large \n    btn-primary \n    ${this.<span class=\"hljs-keyword\">state</span>.isPressed ? 'btn-pressed' : ''}\n    ${(!this.<span class=\"hljs-keyword\">state</span>.isPressed &amp;&amp; this.<span class=\"hljs-keyword\">state</span>.isHovered) ? 'btn-over' : ''}\n`;</code></pre>\n<p>Though the template literal way of writing class names is somewhat simpler and faster, it&#39;s <strong>still fairly redundant</strong> and it&#39;s not free of certain pitfalls. For example, while writing <code>${(!this.state.isPressed &amp;&amp; this.state.isHovered) ? &#39;btn-over&#39; : &#39;&#39;}</code>, making sure that an empty string <code>&#39;&#39;</code> gets added if the condition fails, is quite redundant and long. And the template literal <strong>does not remove extra/unnecessary whitespace and newlines</strong> from the output on its own.</p>\n<p>For example, why not write something like <code>${!this.state.isPressed &amp;&amp; this.state.isHovered &amp;&amp; &#39;btn-over&#39;}</code> ? But there is a pitfall; if the condition resolves to <code>true</code>, the <code>btn-over</code> gets added, but if the condition resolves to <code>false</code>, the string <code>&#39;false&#39;</code> gets added to the output. What if we write expressions that resolve to <code>undefined</code> or <code>null</code> or <code>NaN</code> or anything similar ? Javascript would simply treat them as strings and move on. It goes without saying that there are plenty of such &#39;shoot in the foot&#39; scenarios with this approach.</p>\n<p>Moreover, what if we already have a valid configuration object and we want to reduce it to a classnames string ? There is no obvious way to do that directly using only the template literals, we may possibly do it like <code>Object.keys(config).reduce(...)</code>, or we may use the classNames package to do it for us. Of course, using the classNames package is more performant, because the package is well optimized for this usecase.</p>\n<p>But what if there was a way to write the above example like the following without having any behavioral pitfalls and without losing any performance,</p>\n<pre><code class=\"language-js\">const btnClass = secretSauce`\n    btn\n    btn-large\n    btn-primary\n    ${this.<span class=\"hljs-keyword\">state</span>.isPressed &amp;&amp; 'btn-pressed'}\n    ${!this.<span class=\"hljs-keyword\">state</span>.isPressed &amp;&amp; this.<span class=\"hljs-keyword\">state</span>.isHovered &amp;&amp; 'btn-over'}\n`;</code></pre>\n<h2 id=\"enter-classd\">Enter <a href=\"https://www.npmjs.com/package/classd\"><code>classd</code></a></h2>\n<p><code>classd</code> is the secretSauce you needed in the example above. It&#39;s tagged template based fast and modern classNames alternative that preserves all the awesome bits of classNames and augments it with more.</p>\n<p>The <code>classd</code> tag processes the interpolation values in the template literal according to the following specification.</p>\n<ol>\n<li>Strings and numbers are valid values and are added to the output.</li>\n<li>It drops <code>undefined</code>, <code>null</code>, <code>NaN</code> and <code>boolean</code> values.</li>\n<li>If the value is an Array or an Iterable, it flattens the value and recursively processes the elements.</li>\n<li>If the value is an Object or a Map, it drops keys associated with falsy values and adds the remaining keys to the output.</li>\n<li>If the value is a function, it calls the function and adds its return value if that&#39;s valid</li>\n<li>It removes all unnecessary whitespace.</li>\n</ol>\n<p>Here are a few examples:</p>\n<pre><code class=\"language-js\">classd<span class=\"hljs-string\">`foo bar`</span>; <span class=\"hljs-comment\">// =&gt; 'foo bar'</span>\nclassd<span class=\"hljs-string\">`foo <span class=\"hljs-subst\">${<span class=\"hljs-literal\">null</span> &amp;&amp; <span class=\"hljs-string\">'bar'</span>}</span>`</span>; <span class=\"hljs-comment\">// =&gt; 'foo'</span>\nclassd<span class=\"hljs-string\">`foo-<span class=\"hljs-subst\">${<span class=\"hljs-literal\">true</span> &amp;&amp; <span class=\"hljs-string\">'bar'</span>}</span>`</span>; <span class=\"hljs-comment\">// =&gt; 'foo-bar'</span>\nclassd<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-literal\">true</span>}</span> <span class=\"hljs-subst\">${<span class=\"hljs-literal\">false</span>}</span>`</span>; <span class=\"hljs-comment\">// =&gt; ''</span>\nclassd<span class=\"hljs-string\">`<span class=\"hljs-subst\">${{ foo: <span class=\"hljs-literal\">true</span>, bar: <span class=\"hljs-literal\">false</span>}</span>}`</span>; <span class=\"hljs-comment\">// =&gt; 'foo'</span>\nclassd<span class=\"hljs-string\">`<span class=\"hljs-subst\">${{foo: <span class=\"hljs-literal\">true</span>}</span>} <span class=\"hljs-subst\">${{bar: <span class=\"hljs-literal\">true</span>}</span>} <span class=\"hljs-subst\">${{baz: <span class=\"hljs-literal\">false</span>}</span>}`</span>; <span class=\"hljs-comment\">// =&gt; 'foo bar'</span>\nclassd<span class=\"hljs-string\">`a <span class=\"hljs-subst\">${[ <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">false</span> &amp;&amp; <span class=\"hljs-string\">'d'</span> ]}</span>`</span>; <span class=\"hljs-comment\">// =&gt; 'a b c'</span>\nclassd<span class=\"hljs-string\">`<span class=\"hljs-subst\">${[<span class=\"hljs-string\">'a'</span>, { b: <span class=\"hljs-number\">1</span>, c: <span class=\"hljs-number\">0</span> }</span>]}`</span>; <span class=\"hljs-comment\">// 'a b'</span>\nclassd<span class=\"hljs-string\">`    a    b  \\n  <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">10</span>).fill(<span class=\"hljs-string\">' '</span>)}</span> c`</span>; <span class=\"hljs-comment\">// =&gt; 'a b c'</span></code></pre>\n<h3 id=\"installation-and-usage\">Installation and usage</h3>\n<p>The <code>classd</code> package exports 4 functions:</p>\n<ol>\n<li><code>classd</code> (Tag for template literals, default)</li>\n<li><code>classDedupe</code> (Tag for template literals)</li>\n<li><code>classdFn</code> (Variadic function, for compatibility, similar to <code>classNames</code>)</li>\n<li><code>classDedupeFn</code> (Variadic function, for compatibility, similar to <code>classNames/dedupe</code>)</li>\n</ol>\n<p>The package is available on <a href=\"https://www.npmjs.com\">NPM</a> can be installed using package managers like <code>npm</code> and <code>yarn</code>. It can also be pulled from CDN directly into your webpages.</p>\n<h4 id=\"install-using-package-manager\">Install using package manager</h4>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># via npm </span>\nnpm install --save classd\n\n<span class=\"hljs-comment\"># or Yarn </span>\nyarn <span class=\"hljs-keyword\">add</span><span class=\"bash\"> classd</span></code></pre>\n<h4 id=\"use-in-es6-modules\">Use in ES6 Modules</h4>\n<pre><code class=\"language-js\">\n<span class=\"hljs-comment\">// ES6 import (default - classd tag for template literals)</span>\n<span class=\"hljs-keyword\">import</span> classd from <span class=\"hljs-string\">'classd'</span>;\n\n<span class=\"hljs-comment\">// example use</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">width</span> = <span class=\"hljs-number\">1080</span>;\n<span class=\"hljs-keyword\">const</span> classes = classd`container padding-${{\n    lg: <span class=\"hljs-built_in\">width</span> &gt; <span class=\"hljs-number\">1280</span>, \n    md: <span class=\"hljs-built_in\">width</span> &gt; <span class=\"hljs-number\">960</span> &amp;&amp; <span class=\"hljs-built_in\">width</span> &lt; <span class=\"hljs-number\">1280</span>,\n    sm: <span class=\"hljs-built_in\">width</span> &lt;= <span class=\"hljs-number\">960</span>\n}} margin<span class=\"hljs-number\">-0</span> ${<span class=\"hljs-built_in\">width</span> &gt; <span class=\"hljs-number\">960</span> &amp;&amp; <span class=\"hljs-string\">'blue'</span>} ${<span class=\"hljs-built_in\">width</span> &lt; <span class=\"hljs-number\">960</span> &amp;&amp; <span class=\"hljs-string\">'red'</span>}`;\nconsole.<span class=\"hljs-built_in\">log</span>(classes); <span class=\"hljs-comment\">// =&gt; 'container padding-md margin-0 blue'</span>\n\n\n<span class=\"hljs-comment\">// ES6 import any of the exported functions</span>\n<span class=\"hljs-keyword\">import</span> { classd, classDedupe, classdFn, classDedupeFn } from <span class=\"hljs-string\">'classd'</span>;\n\n<span class=\"hljs-comment\">// example use (of classdFn)</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">width</span> = <span class=\"hljs-number\">1080</span>;\n<span class=\"hljs-keyword\">const</span> classes = classdFn (<span class=\"hljs-string\">'container'</span>, {\n    <span class=\"hljs-string\">'padding-lg'</span>: <span class=\"hljs-built_in\">width</span> &gt; <span class=\"hljs-number\">1280</span>, \n    <span class=\"hljs-string\">'padding-md'</span>: <span class=\"hljs-built_in\">width</span> &gt; <span class=\"hljs-number\">960</span> &amp;&amp; <span class=\"hljs-built_in\">width</span> &lt; <span class=\"hljs-number\">1280</span>,\n    <span class=\"hljs-string\">'padding-sm'</span>: <span class=\"hljs-built_in\">width</span> &lt;= <span class=\"hljs-number\">960</span>\n}, (<span class=\"hljs-built_in\">width</span> &gt; <span class=\"hljs-number\">960</span> &amp;&amp; <span class=\"hljs-string\">'blue'</span>), <span class=\"hljs-string\">'margin-0'</span>);\nconsole.<span class=\"hljs-built_in\">log</span>(classes); <span class=\"hljs-comment\">// =&gt; 'container padding-md blue margin-0'</span></code></pre>\n<h4 id=\"use-in-commonjs-modules-nodejs\">Use in Commonjs modules (Nodejs)</h4>\n<pre><code class=\"language-js\"><span class=\"hljs-regexp\">//</span> commonjs <span class=\"hljs-built_in\">require</span> classd tag <span class=\"hljs-keyword\">for</span> template literals (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">export</span>)\nconst classd = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'classd'</span>).<span class=\"hljs-keyword\">default</span>\n\n<span class=\"hljs-regexp\">//</span> commonjs <span class=\"hljs-built_in\">require</span> any <span class=\"hljs-keyword\">of</span> the exported functions\nconst { classd, classDedupe, classdFn, classDedupeFn } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'classd'</span>);\n\n<span class=\"hljs-regexp\">//</span> commonjs <span class=\"hljs-built_in\">require</span> classd <span class=\"hljs-built_in\">module</span>\nconst classd = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'classd'</span>); <span class=\"hljs-regexp\">//</span> exports can be used <span class=\"hljs-keyword\">as</span> classd.classd, classd.classDedupe etc</code></pre>\n<h4 id=\"pull-from-cdn\">Pull from CDN</h4>\n<pre><code class=\"language-html\">\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://cdn.jsdelivr.net/npm/classd@1.0/lib/index.js'</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/javascript'</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">const</span> { classd, classDedupe, classdFn, classDedupeFn } = <span class=\"hljs-built_in\">window</span>.classd;\n    <span class=\"hljs-built_in\">console</span>.log(classd<span class=\"hljs-string\">`container <span class=\"hljs-subst\">${<span class=\"hljs-number\">1</span> &gt; <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-string\">'blue'</span>}</span>`</span>); <span class=\"hljs-comment\">// =&gt; 'container blue'</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> </code></pre>\n<h3 id=\"well-what-are-classdedupe-classdfn-and-classdedupefn-\">Well, what are <code>classDedupe</code>, <code>classdFn</code> and <code>classDedupeFn</code> ?</h3>\n<p>The <code>classdFn</code> follows the same specifications as the <code>classd</code> tag. It&#39;s a straightforward replacement for <code>classNames</code>. Everything that&#39;s valid with <code>classNames</code> is also valid with <code>classdFn</code>. In addition, <code>classdFn</code> supports passing Maps, Sets, and other Iterables as arguments. Moreover it&#39;s slightly faster than <code>classNames</code> in general usage.</p>\n<p>If you want to migrate an existing project from using <code>classNames</code> to <code>classd</code>, using the <code>classdFn</code> is the fastest and simplest thing to do. The migration from <code>classNames</code> is as simple as:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// before</span>\n<span class=\"hljs-keyword\">import</span> classNames <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'classnames'</span>;\n\n<span class=\"hljs-comment\">//after</span>\n<span class=\"hljs-keyword\">import</span> { classdFn <span class=\"hljs-keyword\">as</span> classNames } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'classd'</span>;</code></pre>\n<p>The <code>classDedupe</code> tag is an enhanced and about 60% slower version of the <code>classd</code> tag. It does everything that the <code>classd</code> tag does. In addition to that it checks for repeating names among the class names and ensures that each valid class name appears only once in the output string.</p>\n<p>The <code>classDedupeFn</code> is the function equivalent of the <code>classDedupe</code> tag. It follows the same signature as <code>classdFn</code> and <code>classNames</code>.</p>\n<p>It differs from the <code>classNames/dedupe</code> in the behaviour that, the <code>classNames/dedupe</code> unsets a class if a configuration object appearing later in its arguments unsets it; whereas <code>classDedupe</code> does not unset a class name once it&#39;s set.</p>\n<h3 id=\"what-about-performance-and-stability-\">What about performance and stability ?</h3>\n<p>As conditionally applying class names is a common task in web frontend, and the functions are supposed to be called many times during a render cycle, it&#39;s imperative that the implementation of <code>classd</code> be highly performant and stable. Therefore we take the stability and performance of this package very seriously. Updates are thoroughly reviewed for performance impacts before being released. We maintain a comprehensive test suite to ensure stability.</p>\n<p>Here is a <strong><a href=\"https://jsperf.com/classd-v1-0-0-test-1\">JSPerf benchmark</a></strong> of the <code>classd</code> package, compared against <code>classNames</code>. As we can see, the <code>classd</code> tag is as performant as <code>classNames</code>, while the <code>classdFn</code> is slightly faster.</p>\n<p><img src=\"https://gnsp.in/blog/posts/opensourcing-classd-TbZb2U/assets/bench.png\" alt=\"JSPerf benchmark\"></p>\n<h3 id=\"source-code-and-contributing\">Source code and contributing</h3>\n<p>The source code is available on Github for you. Any contributions in the form of Pull Request, Issue or Suggestion are welcome. <strong>If you like it, <a href=\"https://github.com/GnsP/classd\">please give it a star on Github.</a></strong></p>\n<p>Thanks for reading and do give it a try !</p>\n",
    "abstract": "<br/>If you are a frontend developer, there is a fair chance that you have used<br/>Jedwatson&#39;s classNames package in your projects. In fact, classNames is the official replace<span class=\"ellipsis\">...</span>"
}