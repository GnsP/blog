{
    "filepath": "./posts/making-a-neon-clock-using-react-hooks-XNgI3Z/post.json",
    "id": "making-a-neon-clock-using-react-hooks-XNgI3Z",
    "title": "Making a Neon Clock using React Hooks",
    "href": "https://gnsp.in/blog/posts/making-a-neon-clock-using-react-hooks-XNgI3Z/index.html",
    "cover_image": "https://gnsp.in/blog/posts/making-a-neon-clock-using-react-hooks-XNgI3Z/assets/cover.png",
    "created": "September 7, 2019",
    "modified": "September 30, 2019",
    "published": true,
    "categories": [
        "react",
        "javascript",
        "css",
        "html",
        "pug",
        "less"
    ],
    "content": "<hr>\n<h3 id=\"a-little-bit-of-backstory\">A little bit of backstory</h3>\n<p><strong>TL;DR; some rather dark humour on what motivated me to make the clock</strong></p>\n<p>About 2 years ago, back in September of 2017, when I was a Software Engineer in <a href=\"https://zomato.com\">Zomato</a> in Delhi NCR, I contracted a severe case of Viral Hepatitis-E. Then I had to take leave from the job and go back to my parental home in the small, little known, coastal town in Odisha (my hometown) to take rest and recover. Recovering from an illness like Hepatitis-E is a rather lengthy and painful process, it took me 20 days. Back then, the network coverage in my locality was not very good and the internet speed was frustratingly low (a little better than 2G) and there were only a handful of channels available on the TV (most of them being local news channels). So, for 20 long days, I stayed home virtually cut off from the world outside, not having a lot of things to worry about than taking rest and recovering. Of course, I had some good books (novel mostly) in my room, but there are only so many times a man can read and re-read a certain book. All in all, life was as far removed as possible from the hustle of a fast growing start-up in a metro city.</p>\n<p>I spent the 20 days, reading, looking at the clock, reading again, looking at the clock again, checking if it was time to take medicines, read again, look at the clock again and so on... There is a saying that time goes slow when you want it to pass faster, it was one of those times.</p>\n<p>Eventually, a couple of days in to my recovery / isolation, I figured if I had to spend half of my life looking at clocks and telling myself it was so-and-so o&#39; clock of the day, why not code a little clock for a change ? I could write that in good old HTML, CSS and Vanilla JS without having to access the internet and pull half of everything out there with npm. And I did. </p>\n<p>2 years later, that is in September of 2019, <strong>I have revisited that little clock of mine and rewritten it using React Hooks</strong>. So let&#39;s jump into it and look at the <strong>making of the neon clock</strong>.</p>\n<h2 id=\"the-clock-making\">The Clock Making</h2>\n<p>Here is how it looks like (the clock that we will be building in this article)</p>\n<p><img src=\"https://gnsp.in/blog/posts/making-a-neon-clock-using-react-hooks-XNgI3Z/assets/clock.png\" alt=\"The Neon Clock\"></p>\n<h3 id=\"the-requirements\">The Requirements</h3>\n<ol>\n<li>It should sync with the system clock and tick every second.</li>\n<li>It should convert the current time to an object specifying how to read it out in standard english.</li>\n<li>It should highlight the relevant phrases from a list of words that would combine to read out the current time.</li>\n<li>It should speak the what time it is, every 15 minutes.</li>\n<li>The clock should be animated.</li>\n</ol>\n<h3 id=\"scaffolding-the-page-in-pug\">Scaffolding the page in Pug</h3>\n<p>Because we will be using React to render our clock, we do not really need to write a lot of HTML just now; rather we will just link our JS libraries and stylesheets and create a container <code>div</code> with id <code>root</code> where React will render our application. Let&#39;s write that up quickly in Pug.</p>\n<p>We will be using the <code>Julius Sans One</code> font from <a href=\"https://fonts.google.com/?query=julius+sans+one\">Google fonts</a>, because that&#39;s cool.</p>\n<pre><code class=\"language-pug\">html\n  head\n    title Neon<span class=\"hljs-built_in\"> Clock </span>(Using React Hooks)\n    meta(<span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">'viewport'</span>, <span class=\"hljs-attribute\">content</span>=<span class=\"hljs-string\">'initial-scale=2.0'</span>)\n    link(<span class=\"hljs-attribute\">rel</span>=<span class=\"hljs-string\">'stylesheet'</span>, <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">'https://fonts.googleapis.com/css?family=Julius+Sans+One'</span>)\n    link(<span class=\"hljs-attribute\">rel</span>=<span class=\"hljs-string\">'styleheet'</span>, <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">'/style.css'</span>)\n\n  body\n    #root\n    script(<span class=\"hljs-attribute\">type</span>=<span class=\"hljs-string\">'text/javascript'</span>, <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-string\">'https://cdnjs.cloudflare.com/ajax/libs/react/16.8.6/umd/react.production.min.js'</span>)\n    script(<span class=\"hljs-attribute\">type</span>=<span class=\"hljs-string\">'text/javascript'</span>, <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-string\">'https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.6/umd/react-dom.production.min.js'</span>)</code></pre>\n<h3 id=\"writing-the-application-in-javascript\">Writing the application in Javascript</h3>\n<h4 id=\"getting-the-time-and-reading-it-out\">Getting the time and reading it out</h4>\n<p>Let&#39;s start with the phrases, that we will need to read out the time. Here are a few examples where the time is given in 24 hours format along with the way these are read:</p>\n<ul>\n<li><code>00:00</code> - It&#39;s midnight</li>\n<li><code>00:05</code> - It&#39;s five past midnight</li>\n<li><code>00:10</code> - It&#39;s ten past midnight</li>\n<li><code>01:00</code> - It&#39;s one O&#39;clock in the morning</li>\n<li><code>01:15</code> - It&#39;s quarter past one in the morning</li>\n<li><code>13:30</code> - It&#39;s half past one in the afternoon</li>\n<li><code>11:45</code> - It&#39;s quarter to noon</li>\n<li><code>17:55</code> - It&#39;s five to six in the afternoon</li>\n<li><code>20:25</code> - It&#39;s twenty five past eight in the evening</li>\n<li><code>20:26</code> - It&#39;s about twenty five past eight in the evening</li>\n<li><code>20:24</code> - It&#39;s nearly twenty five past eight in the evening</li>\n<li>... and so on</li>\n</ul>\n<p>If we look at all the possible strings that follow this format, it becomes apparent that they can be constructed from the following list of phrases in order:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> phrases = [\n  <span class=\"hljs-string\">'IT IS'</span>,\n  <span class=\"hljs-string\">'ABOUT'</span>,\n  <span class=\"hljs-string\">'NEARLY'</span>,\n  <span class=\"hljs-string\">'TEN'</span>,\n  <span class=\"hljs-string\">'QUARTER'</span>,\n  <span class=\"hljs-string\">'TWENTY'</span>,\n  <span class=\"hljs-string\">'FIVE'</span>,\n  <span class=\"hljs-string\">'HALF'</span>,\n  <span class=\"hljs-string\">'PAST'</span>,\n  <span class=\"hljs-string\">'TO'</span>,\n  <span class=\"hljs-string\">'ONE'</span>,\n  <span class=\"hljs-string\">'TWO'</span>,\n  <span class=\"hljs-string\">'THREE'</span>,\n  <span class=\"hljs-string\">'FOUR'</span>,\n  <span class=\"hljs-string\">'FIVE'</span>,\n  <span class=\"hljs-string\">'SIX'</span>,\n  <span class=\"hljs-string\">'SEVEN'</span>,\n  <span class=\"hljs-string\">'EIGHT'</span>,\n  <span class=\"hljs-string\">'NINE'</span>,\n  <span class=\"hljs-string\">'TEN'</span>,\n  <span class=\"hljs-string\">'ELEVEN'</span>,\n  <span class=\"hljs-string\">'NOON'</span>,\n  <span class=\"hljs-string\">'MIDNIGHT'</span>,\n  <span class=\"hljs-string\">'O\\'</span> CLOCK<span class=\"hljs-string\">',\n  '</span><span class=\"hljs-keyword\">IN</span> THE<span class=\"hljs-string\">',\n  '</span>MORNING<span class=\"hljs-string\">',\n  '</span>AFTERNOON<span class=\"hljs-string\">',\n  '</span>EVENING<span class=\"hljs-string\">',\n];</span></code></pre>\n<p>Notice that, <code>five</code> and <code>ten</code> appear twice in the list. This is because these phrases can appear twice in a time read out (once in the minute part and once in the hour part, consider 17:25 or 04:55 or 10:10 etc)</p>\n<p>Now let&#39;s write up a function that will get the current time and extract hour, minute and second values, as well as the locale string describing the current date and current time.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">function</span> getNow () {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">now</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.<span class=\"hljs-built_in\">now</span>());\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">hour</span> = <span class=\"hljs-built_in\">now</span>.getHours();\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">minute</span> = <span class=\"hljs-built_in\">now</span>.getMinutes();\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">second</span> = <span class=\"hljs-built_in\">now</span>.getSeconds();\n  <span class=\"hljs-keyword\">const</span> display = <span class=\"hljs-built_in\">now</span>.toLocaleString();\n\n  return {\n    <span class=\"hljs-built_in\">hour</span>,\n    <span class=\"hljs-built_in\">minute</span>,\n    <span class=\"hljs-built_in\">second</span>,\n    display,\n  };\n}</code></pre>\n<p>Now that we have a function to get the current time as a simple object, let&#39;s write a function to analyze that current time object and figure out how to read it out.</p>\n<p>We can do that in 2 steps:</p>\n<ol>\n<li>Create a configuration object that describes certain aspects of the reading out process for any given time.</li>\n<li>Generate the actual time read out string.</li>\n</ol>\n<p>For step-1 let&#39;s consider a few questions we need to answer before we can decide how to read out a give time value.</p>\n<ol>\n<li>Do we need the seconds value ? (This is a definite NO)</li>\n<li>Is the <strong>minute</strong> value an <strong>exact multiple of 5</strong> ? In other words, is the minute hand pointing directly to a number on the dial of the clock ?</li>\n<li>Is the minute value <strong>slightly less than a multiple of 5</strong> ? In other words, is the minute hand slightly before a number on the dial of the clock ?</li>\n<li>Is the minute value <strong>slightly more than a multiple of 5</strong> ? In other words, is the minute hand slightly after a number on the dial of the clock ?</li>\n<li>What is the nearest multiple of five value from the minute hand ?</li>\n<li>Is it an exact hour ? Is it something O&#39;clock or noon or midnight ?</li>\n<li>Is it a some minutes past a certain hour ?</li>\n<li>Is it less than 30 minutes before a certain hour ?</li>\n<li>What is the nearest value to the hour hand on the dial of the clock ?</li>\n<li>Is it morning or afternoon or evening ?</li>\n</ol>\n<p>We can now write a function that takes a simple time object containing hour and minute values and answers these questions for us.</p>\n<pre><code class=\"language-js\">function getReadoutConfig ({ <span class=\"hljs-built_in\">hour</span>, <span class=\"hljs-built_in\">minute</span> }) {\n  <span class=\"hljs-keyword\">const</span> lastMinuteMark = Math.<span class=\"hljs-built_in\">floor</span>(<span class=\"hljs-built_in\">minute</span> / <span class=\"hljs-number\">5</span>) * <span class=\"hljs-number\">5</span>;\n  <span class=\"hljs-keyword\">const</span> distFromLast = <span class=\"hljs-built_in\">minute</span> - lastMinuteMark;\n  <span class=\"hljs-keyword\">const</span> isExact = distFromLast === <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> isNearly = !isExact &amp;&amp; distFromLast &gt; <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">const</span> isAbout = !isExact &amp;&amp; !isNearly;\n  <span class=\"hljs-keyword\">const</span> nearestMinuteMark = isNearly\n    ? (lastMinuteMark + <span class=\"hljs-number\">5</span>) % <span class=\"hljs-number\">60</span>\n    : lastMinuteMark;\n  <span class=\"hljs-keyword\">const</span> isOClock = nearestMinuteMark === <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> isPast = !isOClock &amp;&amp; nearestMinuteMark &lt;= <span class=\"hljs-number\">30</span>;\n  <span class=\"hljs-keyword\">const</span> isTo = !isOClock &amp;&amp; !isPast;\n  <span class=\"hljs-keyword\">const</span> minuteMark = (isPast || isOClock)\n    ? nearestMinuteMark\n    : <span class=\"hljs-number\">60</span> - nearestMinuteMark;\n\n  <span class=\"hljs-keyword\">const</span> nearestHour = (isTo || (isOClock &amp;&amp; isNearly)) ? (<span class=\"hljs-built_in\">hour</span> + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">24</span> : <span class=\"hljs-built_in\">hour</span>;\n  <span class=\"hljs-keyword\">const</span> nearestHour12 = nearestHour &gt; <span class=\"hljs-number\">12</span>\n    ? nearestHour - <span class=\"hljs-number\">12</span>\n    : nearestHour;\n  <span class=\"hljs-keyword\">const</span> isNoon = nearestHour === <span class=\"hljs-number\">12</span>;\n  <span class=\"hljs-keyword\">const</span> isMidnight = nearestHour === <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> isMorning = !isMidnight &amp;&amp; nearestHour &lt; <span class=\"hljs-number\">12</span>;\n  <span class=\"hljs-keyword\">const</span> isAfternoon = nearestHour &gt; <span class=\"hljs-number\">12</span> &amp;&amp; nearestHour &lt;= <span class=\"hljs-number\">18</span>;\n  <span class=\"hljs-keyword\">const</span> isEvening = nearestHour &gt; <span class=\"hljs-number\">18</span>;\n\n  <span class=\"hljs-keyword\">return</span> {\n    isExact,\n    isAbout,\n    isNearly,\n\n    <span class=\"hljs-built_in\">minute</span>: minuteMark,\n    isOClock: isOClock &amp;&amp; !isNoon &amp;&amp; !isMidnight,\n    isPast,\n    isTo,\n\n    <span class=\"hljs-built_in\">hour</span>: nearestHour12,\n    isNoon,\n    isMidnight,\n    isMorning,\n    isAfternoon,\n    isEvening,\n  };\n}</code></pre>\n<p>In step-2, we take the configuration object returned from the function above and check which phrases needs to be highlighted to read out the given time. We will simply return an array of boolean values (true or false) indicating whether a phrase in the phrases array is to be highlighted or not.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">function</span> getHighlights (<span class=\"hljs-keyword\">config</span>) {\n  <span class=\"hljs-keyword\">return</span> [\n    true, <span class=\"hljs-comment\">// IT IS</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isAbout</span>, <span class=\"hljs-comment\">// ABOUT</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isNearly</span>, <span class=\"hljs-comment\">// NEARLY</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.minute</span> === <span class=\"hljs-number\">10</span>, <span class=\"hljs-comment\">// TEN</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.minute</span> === <span class=\"hljs-number\">15</span>, <span class=\"hljs-comment\">// QUARTER</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.minute</span> === <span class=\"hljs-number\">20</span> || <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.minute</span> === <span class=\"hljs-number\">25</span>, <span class=\"hljs-comment\">// TWENTY</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.minute</span> === <span class=\"hljs-number\">5</span> || <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.minute</span> === <span class=\"hljs-number\">25</span>, <span class=\"hljs-comment\">// FIVE</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.minute</span> === <span class=\"hljs-number\">30</span>, <span class=\"hljs-comment\">// HALF</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isPast</span>, <span class=\"hljs-comment\">// PAST</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isTo</span>, <span class=\"hljs-comment\">// TO</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// ONE</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// TWO</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">3</span>, <span class=\"hljs-comment\">// THREE</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">// FOUR</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">5</span>, <span class=\"hljs-comment\">// FIVE</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">6</span>, <span class=\"hljs-comment\">// SIX</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">7</span>, <span class=\"hljs-comment\">// SEVEN</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">8</span>, <span class=\"hljs-comment\">// EIGHT</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">9</span>, <span class=\"hljs-comment\">// NINE</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">10</span>, <span class=\"hljs-comment\">// TEN</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.hour</span> === <span class=\"hljs-number\">11</span>, <span class=\"hljs-comment\">// ELEVEN</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isNoon</span>, <span class=\"hljs-comment\">// NOON</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isMidnight</span>, <span class=\"hljs-comment\">// MIDNIGHT</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isOClock</span>, <span class=\"hljs-comment\">// O' CLOCK</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isMorning</span> || <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isAfternoon</span> || <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isEvening</span>, <span class=\"hljs-comment\">// IN THE</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isMorning</span>, <span class=\"hljs-comment\">// MORNING</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isAfternoon</span>, <span class=\"hljs-comment\">// AFTERNOON</span>\n    <span class=\"hljs-keyword\">config</span><span class=\"hljs-variable\">.isEvening</span>, <span class=\"hljs-comment\">// EVENING</span>\n  ];\n}</code></pre>\n<p>Now we can get the actual time readout string by concatenating highlighted phrases from the phrases array:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-attribute\">const readoutConfig</span> = getReadoutConfig(time);\n<span class=\"hljs-attribute\">const highlighted</span> = getHighlights(readoutConfig);\n<span class=\"hljs-attribute\">const readoutString</span> = phrases.filter((phrase, index) =&gt; highlighted[index]).join(<span class=\"hljs-string\">' '</span>);</code></pre>\n<h4 id=\"the-useclock-hook\">The <code>useClock</code> hook</h4>\n<p>Now that we have functions to get the current time and to read it out, we need some way to make sure that these functions get used in sync with the system clock every second. We can do that by </p>\n<ol>\n<li>check the time now</li>\n<li>decide when the next second starts</li>\n<li>register a 1000ms (1s) interval when the next second starts.</li>\n<li>everytime the interval ticks, update the current time in our app.</li>\n</ol>\n<p>Let&#39;s write a <a href=\"https://reactjs.org/docs/hooks-intro.html\">React Hook</a> for that and call it <code>useClock</code>. Firstly, we need a state value called <code>time</code> that will keep track of the current time. And we need another state value called <code>timer</code> that will keep track of whether we have set an interval or not.</p>\n<p>Our hook will check if the <code>timer</code> or interval has been set and if not, it will set the interval. This bit of logic can be written using <code>useEffect</code>, that runs once when the application renders for the first time. This effect does not need to run on every subsequent render unless we clear the interval and set the <code>timer</code> to <code>null</code>.  </p>\n<p>Each time the interval ticks, we will set the state <code>time</code> to the current time.</p>\n<p>Because the users of the <code>useClock</code> hook are not supposed to set the <code>time</code> value by themselves, and can only read it, we will return only <code>time</code> from the <code>useClock</code> hook.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useClock</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [timer, setTimer] = React.useState(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [time, setTime] = React.useState(getNow());\n\n  <span class=\"hljs-comment\">// this effect will run when our app renders for the first time</span>\n  React.useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// When this effect runs, initialize the timer / interval</span>\n    <span class=\"hljs-keyword\">if</span> (!timer) initTimer();\n\n    <span class=\"hljs-comment\">// This returned function will clear the interval when our app unmounts</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">(<span class=\"hljs-params\"></span>) =&gt; (<span class=\"hljs-params\">timer &amp;&amp; <span class=\"hljs-built_in\">window</span>.clearInterval(<span class=\"hljs-params\">timer</span>) &amp;&amp; setTimer(<span class=\"hljs-params\"><span class=\"hljs-literal\">null</span></span>)</span>);\n\n  }, [timer]</span>); // <span class=\"hljs-params\">This</span> <span class=\"hljs-params\">hook</span> <span class=\"hljs-params\">will</span> <span class=\"hljs-params\">run</span> <span class=\"hljs-params\">only</span> <span class=\"hljs-params\">when</span> <span class=\"hljs-params\">the</span> <span class=\"hljs-params\">value</span> <span class=\"hljs-params\">of</span> <span class=\"hljs-params\">timer</span> <span class=\"hljs-params\">is</span> <span class=\"hljs-params\">set</span> <span class=\"hljs-params\">or</span> <span class=\"hljs-params\">unset</span>\n\n  <span class=\"hljs-params\">function</span> <span class=\"hljs-params\">initTimer</span> <span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-params\">const</span> <span class=\"hljs-params\">now</span> = <span class=\"hljs-params\">Date</span>.<span class=\"hljs-params\">now</span><span class=\"hljs-params\">()</span>;\n    <span class=\"hljs-params\">const</span> <span class=\"hljs-params\">nextSec</span> = (<span class=\"hljs-params\"><span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-params\">now / 1000</span>) + 1</span>) * 1000;\n    <span class=\"hljs-params\">const</span> <span class=\"hljs-params\">timeLeft</span> = <span class=\"hljs-params\">nextSec</span> - <span class=\"hljs-params\">now</span>;\n\n    // <span class=\"hljs-params\">Register</span> <span class=\"hljs-params\">an</span> <span class=\"hljs-params\">interval</span> <span class=\"hljs-params\">beginning</span> <span class=\"hljs-params\">next</span> <span class=\"hljs-params\">second</span>\n    <span class=\"hljs-params\">window</span>.<span class=\"hljs-params\">setTimeout</span>(<span class=\"hljs-params\">(<span class=\"hljs-params\"></span>) =&gt; {\n      <span class=\"hljs-comment\">// on each second update the state time</span>\n      <span class=\"hljs-keyword\">const</span> interval = <span class=\"hljs-built_in\">window</span>.setInterval(<span class=\"hljs-params\">(<span class=\"hljs-params\"></span>) =&gt; setTime(<span class=\"hljs-params\">getNow(<span class=\"hljs-params\"></span>)</span>), 1000</span>);\n\n      <span class=\"hljs-comment\">// now our timer / interval is set</span>\n      setTimer(<span class=\"hljs-params\">interval</span>);\n    }, timeLeft</span>);\n  }\n\n  <span class=\"hljs-params\">return</span> <span class=\"hljs-params\">time</span>;\n}</span></code></pre>\n<h4 id=\"rendering-the-clock-and-readout-components\">Rendering the Clock and Readout components</h4>\n<p>Now that we have almost everything in place, let&#39;s write some components to render our app. First we need an app component that will render inside the <code>root div</code> we created in our Pug file. It will contain a standard analog clock component and a time readout component.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">NeonClock</span> <span class=\"hljs-params\">()</span></span> {\n  const <span class=\"hljs-built_in\">time</span> = useClock();\n  <span class=\"hljs-keyword\">return</span> (\n    &lt;div className=<span class=\"hljs-string\">'clock'</span>&gt;\n      &lt;StandardClock <span class=\"hljs-built_in\">time</span>={<span class=\"hljs-built_in\">time</span>} /&gt;\n      &lt;TimeReadout <span class=\"hljs-built_in\">time</span>={<span class=\"hljs-built_in\">time</span>} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nconst root = document.getElementById(<span class=\"hljs-string\">'root'</span>);\nReactDOM.render(&lt;NeonClock /&gt;, root);</code></pre>\n<p>Let&#39;s build the <code>StandardClock</code> component first. It will look like an analog clock and will be animated. To look like an analog clock, it will have a dial, which will have 12 Roman numerals and 60 small line segments. Each 5th line segment out of these 60 small line segments needs to be slightly longer. Let&#39;s call these small line segments <code>ticks</code> for simplicity. The clock will have 3 hands of course, which will rotate at their own speeds.</p>\n<p>As it can be seen the only moving parts of this clock are the 3 hands. We can set their rotational motion by setting the CSS <code>transform: rotate(xx.x deg)</code>. </p>\n<pre><code class=\"language-js\">function StandardClock ({ <span class=\"hljs-built_in\">time</span> }) {\n  const clockMarks = [ <span class=\"hljs-string\">'XII'</span>, <span class=\"hljs-string\">'I'</span>, <span class=\"hljs-string\">'II'</span>, <span class=\"hljs-string\">'III'</span>, <span class=\"hljs-string\">'IV'</span>, <span class=\"hljs-string\">'V'</span>, <span class=\"hljs-string\">'VI'</span>, <span class=\"hljs-string\">'VII'</span>, <span class=\"hljs-string\">'VIII'</span>, <span class=\"hljs-string\">'IX'</span>, <span class=\"hljs-string\">'X'</span>, <span class=\"hljs-string\">'XI'</span> ];\n\n  <span class=\"hljs-comment\">// Calculate the angles of rotation of each hand (in degrees)</span>\n  const hourAngle = ((<span class=\"hljs-built_in\">time</span>.hour % <span class=\"hljs-number\">12</span>) * <span class=\"hljs-number\">60</span> + <span class=\"hljs-built_in\">time</span>.minute) / <span class=\"hljs-number\">2</span>;\n  const minuteAngle = (<span class=\"hljs-built_in\">time</span>.minute * <span class=\"hljs-number\">60</span> + <span class=\"hljs-built_in\">time</span>.second) / <span class=\"hljs-number\">10</span>;\n  const secondAngle = <span class=\"hljs-built_in\">time</span>.second * <span class=\"hljs-number\">6</span>;\n\n  return (\n    &lt;div <span class=\"hljs-built_in\">className</span>=<span class=\"hljs-string\">'standard-clock'</span>&gt;\n      &lt;div&gt;\n        { clockMarks.map(mark =&gt; &lt;span <span class=\"hljs-built_in\">className</span>=<span class=\"hljs-string\">'mark'</span>&gt;{mark}&lt;/span&gt;) }\n      &lt;/div&gt;\n      &lt;div&gt;\n        { Array(<span class=\"hljs-number\">60</span>).fill(<span class=\"hljs-number\">1</span>).map(tick =&gt; &lt;span <span class=\"hljs-built_in\">className</span>=<span class=\"hljs-string\">'tick'</span> /&gt;) }\n      &lt;/div&gt;\n      &lt;div <span class=\"hljs-built_in\">className</span>=<span class=\"hljs-string\">'inner-circle'</span> /&gt;\n      &lt;div <span class=\"hljs-built_in\">className</span>=<span class=\"hljs-string\">'inner-circle-2'</span> /&gt;\n      &lt;div <span class=\"hljs-built_in\">className</span>=<span class=\"hljs-string\">'hour-hand'</span> style={{ transform: `rotate(${hourAngle}<span class=\"hljs-built_in\">deg</span>)` }} /&gt;\n      &lt;div <span class=\"hljs-built_in\">className</span>=<span class=\"hljs-string\">'minute-hand'</span> style={{ transform: `rotate(${minuteAngle}<span class=\"hljs-built_in\">deg</span>)` }} /&gt;\n      &lt;div <span class=\"hljs-built_in\">className</span>=<span class=\"hljs-string\">'second-hand'</span> style={{ transform: `rotate(${secondAngle}<span class=\"hljs-built_in\">deg</span>)` }} /&gt;\n      &lt;div <span class=\"hljs-built_in\">className</span>=<span class=\"hljs-string\">'center'</span> /&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n<p>Next, let&#39;s build the time readout component. This will of course have the phrases, some of which will be highlighted. This will also have a speaker component which will use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis\"><code>window.speechSynthesis</code> API</a> to speak out the time every 15 minutes.</p>\n<p>To display the readout text in a cool way, we will display all the phrases in a muted manner and add a <code>glow</code> class to the phrases that should be highlighted.  </p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">TimeReadout</span> (<span class=\"hljs-params\">{ time }</span>) </span>{\n  <span class=\"hljs-comment\">// get the highlighted phrases and the readout string</span>\n  <span class=\"hljs-keyword\">const</span> readoutConfig = getReadoutConfig(time);\n  <span class=\"hljs-keyword\">const</span> highlighted = getHighlights(readoutConfig);\n  <span class=\"hljs-keyword\">const</span> timeText = phrases.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">phrase, index</span>) =&gt;</span> highlighted[index]).join(<span class=\"hljs-string\">' '</span>) + <span class=\"hljs-string\">'.'</span>;\n\n  <span class=\"hljs-comment\">// speak out the time only on the first second of each 15 minutes</span>\n  <span class=\"hljs-keyword\">const</span> shouldSpeak = time.second === <span class=\"hljs-number\">0</span> &amp;&amp; time.minute % <span class=\"hljs-number\">15</span> === <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">'readout'</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">'phrases'</span>&gt;</span>\n        { phrases.map((phrase, index) =&gt; (\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{highlighted[index]</span> ? '<span class=\"hljs-attr\">glow</span>' <span class=\"hljs-attr\">:</span> ''}&gt;</span>\n            {phrase}\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        ))}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">'timer'</span>&gt;</span>{time.display}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Speaker</span> <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{shouldSpeak}</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">{timeText}</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  );\n}</span></code></pre>\n<p>With that done, let&#39;s build our <code>Speaker</code> component. First we need a function that will speak out any given text in a proper British accent (Because the Brits speak English as it should be spoken, which is with humour. And  apparently they invented the English language in the first place, bless them !)</p>\n<p>To speak the text, first we need to create an utterance object for the text and set the rate (how fast should it speak), pitch (of the voice), volume and the voice template (we will use the first voice that speaks <code>en-GB</code>). Then we can pass this utterance object to the <code>speechSynthesis.speak</code> function to actually get it spoken out.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">speak</span> (<span class=\"hljs-params\">text</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> synth = <span class=\"hljs-built_in\">window</span>.speechSynthesis;\n  <span class=\"hljs-keyword\">const</span> rate = <span class=\"hljs-number\">0.7</span>;\n  <span class=\"hljs-keyword\">const</span> pitch = <span class=\"hljs-number\">0.6</span>;\n  <span class=\"hljs-keyword\">const</span> voice = synth.getVoices().filter(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v.lang === <span class=\"hljs-string\">'en-GB'</span>)[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">const</span> utterance = <span class=\"hljs-keyword\">new</span> SpeechSynthesisUtterance(text);\n  utterance.voice = voice;\n  utterance.pitch = pitch;\n  utterance.rate = rate;\n  synth.speak(utterance);\n}</code></pre>\n<p>Now we can create a <code>Speaker</code> component, that will render nothing, but use an <code>useEffect</code> hook to call the speak function when the prop <code>active</code> is set to <code>true</code>.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Speaker</span> (<span class=\"hljs-params\">{ active, text }</span>) </span>{\n  React.useEffect (<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (active) speak(text);\n  });\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}</code></pre>\n<h3 id=\"styling-our-components\">Styling our components</h3>\n<p>With all the components and logic in place, let&#39;s style our components using LESS. In this section I will briefly mention some major / important points in the styling, please refer to <a href=\"https://codepen.io/gnsp/pen/YzKraoa\">the pen for this article</a> for the specifics.</p>\n<h4 id=\"the-muted-and-glowing-phrases\">The muted and glowing phrases</h4>\n<p>The muted text effect is created by using a muted and darker shade of red and a 2px blur on the text. The glow effect is created by using a brighter (almost white) shade of red and a red coloured <code>text-shadow</code> with a 20px spread. Moreover the <code>font-weight</code> of the glowing text is set to <code>bold</code> to give it a bolder and brighter look.</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">span</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-variable\">@muted-red</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span>;\n  <span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">0.5s</span> cubic-bezier(<span class=\"hljs-number\">0.6</span>, -<span class=\"hljs-number\">0.51</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">1.51</span>);\n  <span class=\"hljs-attribute\">vertical-align</span>: middle;\n  <span class=\"hljs-attribute\">filter</span>: blur(<span class=\"hljs-number\">2px</span>);\n\n  <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-class\">.glow</span> {\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-variable\">@glowing-red</span>;\n    <span class=\"hljs-attribute\">text-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-variable\">@shadow-red</span>;\n    <span class=\"hljs-attribute\">font-weight</span>: bold;\n    <span class=\"hljs-attribute\">filter</span>: none;\n  }\n}</code></pre>\n<h4 id=\"the-roman-numerals-on-the-dial\">The Roman Numerals on the dial</h4>\n<p>The dial of the clock (the circle) is of the dimension <code>300px * 300px</code>. Each of the Roman numerals is placed with absolute positioning, <code>10px</code> inside the outer circle and horizontally centered with respect to the outer circle. The <code>transform-origin</code> of the spans containing the numerals is set to coincide with the center of the circle.</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.mark</span> {\n  <span class=\"hljs-attribute\">position</span>: absolute;\n  <span class=\"hljs-attribute\">display</span>: inline-block;\n  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">10px</span>;\n  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">115px</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">50px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">30px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">30px</span>;\n  <span class=\"hljs-attribute\">text-align</span>: center;\n  <span class=\"hljs-attribute\">color</span>: @glowing-red;\n  <span class=\"hljs-attribute\">filter</span>: none;\n  <span class=\"hljs-attribute\">transform-origin</span>: <span class=\"hljs-number\">25px</span> <span class=\"hljs-number\">140px</span>;\n}</code></pre>\n<p>Then each of these spans containing the numerals is rotated with increments of 30 degrees. We have used a LESS recursive mixin to generate the rotations and apply them to the <code>span</code>s with <code>nth-child</code> selectors.</p>\n<pre><code class=\"language-less\"><span class=\"hljs-selector-class\">.generate-mark-rotation</span> (<span class=\"hljs-variable\">@n</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@n</span> = <span class=\"hljs-number\">13</span>) {}\n<span class=\"hljs-selector-class\">.generate-mark-rotation</span> (<span class=\"hljs-variable\">@n</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@n</span> &lt; <span class=\"hljs-number\">13</span>) {\n  <span class=\"hljs-selector-tag\">span</span><span class=\"hljs-selector-class\">.mark</span><span class=\"hljs-selector-pseudo\">:nth-child(</span><span class=\"hljs-variable\">@{n}</span>) {\n    <span class=\"hljs-attribute\">transform</span>: rotate((<span class=\"hljs-variable\">@n</span> - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">30deg</span>);\n  }\n  <span class=\"hljs-selector-class\">.generate-mark-rotation</span>(<span class=\"hljs-variable\">@n</span> + <span class=\"hljs-number\">1</span>);\n}\n<span class=\"hljs-selector-class\">.generate-mark-rotation</span>(<span class=\"hljs-number\">2</span>);</code></pre>\n<p>Same method is used to put the 60 line-segments on the dial in place.</p>\n<h4 id=\"placing-and-rotating-the-hands\">Placing and rotating the hands</h4>\n<p>The hands are first placed at the <code>00:00:00</code> position, using absolute positioning with the bottom of each hand coinciding with the center of the circle. Then the <code>transform-origin</code> of the hands is set to coincide with the center of the circle. </p>\n<p>When the <code>transform:rotate(xx.x deg)</code> is set by the React component on the hand <code>div</code>s they rotate with respect to the center of the clock.</p>\n<h4 id=\"making-it-responsive\">Making it responsive</h4>\n<p>For simplicity, we have set the upper bound for small screen devices to be <code>960px</code>. For smaller screens we use smaller <code>font sizes</code> and smaller dimensions for the clock components. That makes it reasonably responsive across all devices.</p>\n<p><strong>Here is the pen containing everything described in this article</strong></p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"css,result\" data-user=\"gnsp\" data-slug-hash=\"YzKraoa\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Neon Clock (Using React Hooks)\">\n  <span>See the Pen <a href=\"https://codepen.io/gnsp/pen/YzKraoa\">\n  Neon Clock (Using React Hooks)</a> by Ganesh Prasad (<a href=\"https://codepen.io/gnsp\">@gnsp</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n<p>Hoping you enjoyed reading about this little project and learned a few things from it. </p>\n<p><strong>Thanks for reading !</strong></p>\n",
    "abstract": "<br/>A little bit of backstory<br/>TL;DR; some rather dark humour on what motivated me to make the clock<br/><br/><span class=\"ellipsis\">...</span>",
    "date": "September 7, 2019"
}